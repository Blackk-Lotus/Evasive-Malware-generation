#!/usr/bin/env python3

from keras.optimizers import Adam
from generator import build_generator
from discriminator import build_discriminator

def train_gan(epochs, batch_size):
    generator = build_generator()
    discriminator = build_discriminator()

    # Compile both models
    discriminator.compile(loss='binary_crossentropy', optimizer=Adam(), metrics=['accuracy'])

    # Training loop
    for epoch in range(epochs):
        # Generate fake samples
        fake_samples = generator.predict(noise_input)
        # Train the discriminator with real and fake samples
        d_loss_real = discriminator.train_on_batch(real_samples, real_labels)
        d_loss_fake = discriminator.train_on_batch(fake_samples, fake_labels)

        # Train the generator (via the combined model)
        # Generator tries to trick the discriminator
        g_loss = gan.train_on_batch(noise_input, real_labels)

        print(f'Epoch {epoch}, D Loss: {d_loss_real}, G Loss: {g_loss}')

if __name__ == "__main__":
    train_gan(epochs=10000, batch_size=64)
